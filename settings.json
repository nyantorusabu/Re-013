{"autoplay":true,"projectId":"ZERONEIII@NyankoAddon","loadingScreen":{"text":"NowLoading...","progressBar":true,"imageMode":"normal","image":null},"controls":{"fullscreen":{"enabled":true},"greenFlag":{"enabled":false},"stopAll":{"enabled":false},"pause":{"enabled":false}},"packagedRuntime":false,"app":{"packageName":"zeroneiiitouch","windowTitle":"ZERONEIII@NyankoAddon","icon":{"__isBlob":true,"type":"image/png","name":"013chan_minimize.png","data":"iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAAAXNSR0IArs4c6QAAAGRJREFUOE/lk0kSABAMBOXXnuDXnCbFoIaKGzcSnY7Fkhil1LpKydmsXx8mqw3PQIAroDS6BqEi984miHO+G4VBDFAGaJXN7AMQ93567cjzMwqDVGX+NvzO3Og5SAF3JpNRFNQAv9qESaJ7OyIAAAAASUVORK5CYII="},"windowMode":"window","version":"1.0.0","escapeBehavior":"unfullscreen-only","windowControls":"default"},"cloudVariables":{"mode":"local","specialCloudBehaviors":true,"cloudHost":"wss://clouddata.turbowarp.org","custom":{"☁ 1":"ws","☁ 2":"ws","☁ 3":"ws","☁ 4":"ws","☁ 5":"ws","☁ 6":"ws","☁ 7":"ws","☁ 8":"ws","☁ 9":"ws","☁ 10":"ws"},"unsafeCloudBehaviors":false},"turbo":false,"interpolation":false,"framerate":30,"highQualityPen":false,"maxClones":300,"fencing":true,"miscLimits":true,"stageWidth":480,"stageHeight":360,"resizeMode":"preserve-ratio","username":"player####","closeWhenStopped":false,"custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#ff4c4c"},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"compiler":{"enabled":true,"warpTimer":false},"target":"html","chunks":{"gamepad":false,"pointerlock":false},"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"steamworks":{"appId":"480","onError":"warning"},"extensions":["https://extensions.turbowarp.org/lab/text.js","https://extensions.turbowarp.org/Lily/TempVariables2.js","https://extensions.turbowarp.org/CST1229/zip.js","https://extensions.turbowarp.org/Lily/Assets.js","https://extensions.turbowarp.org/Skyhigh173/json.js","https://extensions.turbowarp.org/Lily/ClonesPlus.js","data:text/javascript;base64,","https://extensions.turbowarp.org/true-fantom/network.js","data:text/javascript;base64,","https://extensions.turbowarp.org/local-storage.js","data:text/javascript;base64,Ly8gTmFtZTogRmlsZXMgRXhwYW5kZWQKLy8gSUQ6IGZpbGVzRXhwYW5kZWQKLy8gRGVzY3JpcHRpb246IFJlYWQsIHVwbG9hZCwgYW5kIGRvd25sb2FkIGZpbGVzLgovLyBCeTogR2FyYm9NdWZmaW4KLy8gQnk6IFNoYXJrUG9vbAovLyBCeTogRHJhZ28gQ3V2ZW4gPGh0dHBzOi8vc2NyYXRjaC5taXQuZWR1L3VzZXJzL01BUlRJTkVMUExBWVovPgovLyBCeTogMHpuencgPGh0dHBzOi8vc2NyYXRjaC5taXQuZWR1L3VzZXJzLzB6bnp3Lz4KLy8gTGljZW5zZTogTUlUIEFORCBNUEwtMi4wCgovLyBWZXJzaW9uOiAxLjcuMQoKKGZ1bmN0aW9uIChTY3JhdGNoKSB7CiAgInVzZSBzdHJpY3QiOwogIGlmICghU2NyYXRjaC5leHRlbnNpb25zLnVuc2FuZGJveGVkKSB0aHJvdyBuZXcgRXJyb3IoIkZpbGVzIEV4cGFuZGVkIGV4dGVuc2lvbiBtdXN0IGJlIHJ1biB1bnNhbmRib3hlZCIpOwoKICBjb25zdCBtZW51SWNvblVSSSA9CiJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBITjJaeUI0Yld4dWN6MGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TUM5emRtY2lJSGRwWkhSb1BTSXhNek11TVRZMElpQm9aV2xuYUhROUlqRXpNeTR4TmpRaUlIWnBaWGRDYjNnOUlqQWdNQ0F4TXpNdU1UWTBJREV6TXk0eE5qUWlQanhuSUhOMGNtOXJaUzF0YVhSbGNteHBiV2wwUFNJeE1DSStQSEJoZEdnZ1pEMGlUVE1nTmpZdU5UZ3lRek1nTXpFdU5EWTNJRE14TGpRMk55QXpJRFkyTGpVNE1pQXpjell6TGpVNE1pQXlPQzQwTmpjZ05qTXVOVGd5SURZekxqVTRNaTB5T0M0ME5qY2dOak11TlRneUxUWXpMalU0TWlBMk15NDFPREpUTXlBeE1ERXVOamszSURNZ05qWXVOVGd5ZWlJZ1ptbHNiRDBpSTJaallqRXdNeUlnYzNSeWIydGxQU0lqWW1ZNFlqRXhJaUJ6ZEhKdmEyVXRkMmxrZEdnOUlqWWlMejQ4Y0dGMGFDQmtQU0pOT1RrdU9Ea3lJRFE1TGpreU4zWTBPUzQ1TmpSak1DQTBMalU0TFRNdU56UTRJRGd1TXpJNExUZ3VNekk0SURndU16STRTRFF4TGpVMU9HTXROQzQxT0NBd0xUZ3VNamcxTFRNdU56UTRMVGd1TWpnMUxUZ3VNekk0YkM0d05ERXROall1TmpFNFl6QXROQzQxT0NBekxqY3dOaTA0TGpNeU9DQTRMakk0TmkwNExqTXlPR2d6TXk0ek1Yb2lJR1pwYkd3OUltNXZibVVpSUhOMGNtOXJaUzF2Y0dGamFYUjVQU0l1TVRRNUlpQnpkSEp2YTJVOUlpTXdNREFpSUhOMGNtOXJaUzEzYVdSMGFEMGlNVEFpTHo0OGNHRjBhQ0JrUFNKTk9Ua3VPRGt5SURRNUxqa3lOM1kwT1M0NU5qUmpNQ0EwTGpVNExUTXVOelE0SURndU16STRMVGd1TXpJNElEZ3VNekk0U0RReExqVTFPR010TkM0MU9DQXdMVGd1TWpnMUxUTXVOelE0TFRndU1qZzFMVGd1TXpJNGJDNHdOREV0TmpZdU5qRTRZekF0TkM0MU9DQXpMamN3TmkwNExqTXlPQ0E0TGpJNE5pMDRMak15T0dnek15NHpNWG9pSUdacGJHdzlJaU5tWm1ZaUx6NDhjR0YwYUNCa1BTSk5OekF1TnpJeUlEVTBMakV4TlZZek1TNHhOamRzTWpJdU9UUTNJREl5TGprME9Ib2lJR1pwYkd3OUlpTm1ZMkl4TURNaUx6NDhjR0YwYUNCa1BTSk5PRFF1TmpZNElEWTVMamt4TkdNdExqQXlMakE0T0MwdU1ETTJMakUzTlMwdU1EWXlMakkyTWkwdU1EYzNMak15TkMwdU1qTTJJREV1TURrdExqTTVOaUF5TGpVNE4zRXVNREF4TGpBek9DMHVNREExTGpBMk1XTXVPRGdnTXk0MU16Z3RMall3TWlBMUxqWTVNaTB4TGpVNE5DQTJMalkzTkdFeUlESWdNQ0F3SURFdExqSXVNVGxqTFM0NU5qSXVPRGMxTFRJdU5qUXpJREV1T1RFNExUVXVNVFV5SURFdU9URTRZVGN1TmpVZ055NDJOU0F3SURBZ01TMHpMalF6TlMwdU56ZzJZeTR3TWpZZ01TNDBNRE11TURReElETXVNek0zTGpBME1TQTJMakF5WVRZdU9TQTJMamtnTUNBd0lERWdNaTQwT1RRZ01TNDFNemdnTnk0eElEY3VNU0F3SURBZ01TQXlMakl4SURVdU1UWTNZekFnTWk0NU1TMHhMalkzTlNBMUxqUTBMVFF1TXpjMUlEWXVOVGszY1MwdU1UQXpMakEwT0MwdU1qQTFMakE0T0dNdExqa3dOUzR6TkRRdE1TNDVNak11TlRFMExUTXVNVEUyTGpVeE5DMHVORE15SURBdExqZzVOUzB1TURJdE1TNHpPVGt0TGpBMk4yRXhPQ0F4T0NBd0lEQWdNQzB4TGpJNU5TNHdNRFZqTFM0NU56SXVNVEE0TFRJdU16UXVNakUyTFRRdU1UY3VNekU1TFM0d016WWdNQzB1TURjeUxqQXdOUzB1TVRFMExqQXdOWEV0TGpNMkxqQXhOUzB1TmprNUxqQXhOV010TXk0eU56VWdNQzAxTGpZMk5pMHhMakF6T0MwM0xqRXhMVE11TURoeExTNHdORFl0TGpBMkxTNHdPRE10TGpFeU0yTXRNUzQwTnkweUxqRTVOUzB4TGpVeE1pMDBMamszTWkwdU1URXpMVGN1TWpSeExqQXhOeTB1TURNMUxqQTBNUzB1TURjeFl5NDRPUzB4TGpNNU9TQXlMakU1TFRJdU16azJJRE11T0RjM0xUSXVPVGd6TGpBeUxTNDVPVEl1TURFMUxUSXVNak0yTFM0d01UWXRNeTQzTVRKaE55NDFJRGN1TlNBd0lEQWdNUzB5TGpnNUxqVTFOV010TWk0NE5qTWdNQzAxTGpJeU9DMHhMamN3TVMwMkxqQTFNUzAwTGpJNE9DMHVNVGN0TGpVeU5DMHVNek10TVM0eU9TMHVOeTB6TGpBeE9HRXlJRElnTUNBd0lERXRMakF6TlMwdU1UZzFiQzB1TnpZeExUUXVNalV5WVRjZ055QXdJREFnTUMwdU1UQXpMUzR6TWpSakxTNHpPVFl0TVM0eE1qWXRMalU0TVMweUxqQTRNeTB1TlRneExUTXVNREE0SURBdE1TNHhORGN1TXpNMExUSXVPRGdnTVM0NU1UZ3ROQzQyTURjdU56azNMUzQ0TnpRZ01pNHlORGN0TWk0d01EVWdOQzQxT0RFdE1pNHpOM0V1TkRNekxTNHdOekV1T0RjMExTNHdOekpvTlM0Mk9EZHhMakU1TWlBd0lDNHpPRFV1TURFMVlUY3lJRGN5SURBZ01DQXdJRFV1TnpndExqQXdOU0E0TXlBNE15QXdJREFnTUNBMkxqa3pMUzQxT1RaakxqSTFPQzB1TURnekxqVXpOaTB1TVRZMUxqZ3pOQzB1TWpNM0xqSTRNeTB1TURjeUxqVTNMUzR4TVRndU9EVTRMUzR4TlNBeUxqRTVMUzR5SURRdU1qTXlMalF6TXlBMUxqZ3lJREV1TnprZ01TNDVOeUF4TGpZNU1pQXlMamcwSURRdU1qVXlJREl1TXpJZ05pNDROVFFpSUdacGJHdzlJaU5pWmpoaU1URWlMejQ4Y0dGMGFDQmtQU0pOTnprdU1USXhJRFk0TGpnd05uRXRMak14TmlBeExqSTJOaTB1TlRReklETXVORE0zTFM0d09TQXhMakE0Tmk0d09TQXhMamMyTkM0ek1UWWdNUzR4TXpFdExqQTBOQ0F4TGpRNU15MHVORGs1TGpRMU1TMHhMak0xTnk0ME5USXRMams1TmlBd0xURXVNekV5TFM0MU9USkJOREVnTkRFZ01DQXdJREVnTnpZZ056RXVPVFF6Y1M0d09TMHhMamsyTGpBNUxUSXVNRFV0TGpBME5TQXdMUzR4TXpVdExqQTVNaTAwTGpJd055NHhPRE10Tnk0NU1UVXVOVFExTFM0d09TNDBOVE1nTUNBeExqUTFMakU0SURFdU5EQTBMakU0SURFdU5qTXRMakU0SURFdU5EQTJMUzR4T0NBMExqRTNMakU0SURFdU1UYzVMakU0SURFd0xqRXdObll6TGpNd09YRXdJQzQzTnk0eU1qVWdNUzR3T0Rkb01pNDNOemR4TGpjMk1pMHVNRGtnTVM0eU16SXVNell5TGpRM0xqUTFNeTQwTnlBeExqQTROU0F3SUM0NU9UUXRMamsxSURFdU5EQXpMUzQxT0RndU1qSTFMVEl1TURndU1Ea3RMamN5TXkwdU1EUTFMVEl1TVRJMklEQXRNUzR5TmpVdU1UVTNMVFF1TURjdU16RTJMVEl1TkRRekxqQTVMVEl1T1RnMUxTNDJOemd0TGpNMk15MHVOVFF5SURBdE1TNHhNeTQyTXpJdExqazVOU0F6TGpNd01pMHVPVGsxTGprME9DQXdJREV1TVRjMUxTNHhOVGd1TWpJMkxTNHhOaTR5TWpZdExqWXhWamc1TGpBemNTNHhNelV0TWk0ek1ESWdNQzAyTGpnMk1TMHVNVGd0Tmk0MU5EUXVNVGd4TFRFeExqVXdPV3d0TGpFek55MHVNVE0yY1MweExqWXpOeTR3T1MwMUxqSTNOUzB1TURrdExqUXhJREF0TWk0M056UXVNVGd4TGpVNE55QTBMakV4Tnk0M01qTWdOaTR4T1RZZ01DQXVNamN5TFM0d09TQXhMakl5TVMwdU1EUTJMalkzT0MweExqRXpNUzQyTnprdExqVTRPU0F3TFM0Mk56Z3RMalF3TkMwdU1EUTJMUzR3T1MwdU5UUXpMVEl1TkRJeWJDMHVOelk1TFRRdU16QTJjVEF0TGpFM09TMHVNekUyTFRFdU1USXhMUzR5TnkwdU56WTBMUzR5TnkweExqRTJOaTB1TURBeExTNHpNVFV1TkRNdExqYzROUzQwTXkwdU5EY3hJREV1TWpnNUxTNDJNRFpvTlM0Mk1EaHhNeTQyTmpNdU1UTTFJRFl1TlRFeUlEQmhPRGdnT0RnZ01DQXdJREFnT0M0d05TMHVOekkwY1M0eU56TXRMakV6TlM0NE1UUXRMakkzTGprNU5TMHVNRGtnTVM0Mk1qa3VORFV5TGpZek15NDFOQzQwTlRJZ01TNDBORGNpSUdacGJHdzlJaU5tWm1ZaUx6NDhMMmMrUEM5emRtYysiOwoKICBjb25zdCB2bSA9IFNjcmF0Y2gudm07CiAgY29uc3QgcnVudGltZSA9IHZtLnJ1bnRpbWU7CiAgY29uc3QgaXNQTSA9IFNjcmF0Y2guZXh0ZW5zaW9ucy5pc1Blbmd1aW5Nb2Q7CgogIGNvbnN0IGJ1aWx0SW5Gb250cyA9IFsKICAgICJTYW5zIFNlcmlmIiwgIlNlcmlmIiwgIkhhbmR3cml0aW5nIiwgIk1hcmtlciIsCiAgICAiQ3VybHkiLCAiUGl4ZWwiLCAiU2NyYXRjaCIsICJpbmhlcml0IgogIF07CiAgY29uc3QgTU9ERV9NT0RBTCA9ICJtb2RhbCI7CiAgY29uc3QgTU9ERV9JTU1FRElBVEVMWV9TSE9XX1NFTEVDVE9SID0gInNlbGVjdG9yIjsKICBjb25zdCBNT0RFX09OTFlfU0VMRUNUT1IgPSAib25seS1zZWxlY3RvciI7CiAgY29uc3QgQUxMX01PREVTID0gWwogICAgTU9ERV9NT0RBTCwKICAgIE1PREVfSU1NRURJQVRFTFlfU0hPV19TRUxFQ1RPUiwKICAgIE1PREVfT05MWV9TRUxFQ1RPUiwKICBdOwogIGNvbnN0IEFTX1RFWFQgPSAidGV4dCIsIEFTX0RBVEFfVVJMID0gInVybCIsIEFTX0hFWCA9ICJoZXgiOwogIGNvbnN0IEFTX0JBU0U2NCA9ICJiYXNlNjQiLCBBU19CVUZGRVIgPSAiYXJyYXlCdWZmZXIiOwoKICBsZXQgZW5hYmxlVmlzID0gdHJ1ZTsKICBsZXQgb3BlbkZpbGVTZWxlY3Rvck1vZGUgPSBNT0RFX01PREFMOwogIGxldCBzdG9yZWRGaWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgbGV0IEZpbGVOYW1lID0gIiIsIEZpbGVTaXplID0gIjBrYiIsIFJhd0ZpbGVTaXplID0gIjAiLCBmaWxlRGF0ZSA9ICIiLCBsYXN0RGF0YSA9ICIiOwogIGxldCBvcGVuTW9kYWxzID0gMDsKICBsZXQgc2VsZWN0b3JPcHRpb25zID0gewogICAgYm9yZGVyQ29sb3I6ICIjODg4IiwgdGV4dENvbG9yOiAiIzAwMCIsIG91dGVyOiAiI2ZmZiIsCiAgICBzaXplRm9udDogMS41LCBib3JkZXJSYWRpdXM6IDE2LCBib3JkZXJUeXBlOiAiZGFzaGVkIiwKICAgIGZvbnQ6ICJpbmhlcml0Iiwgc2hhZG93OiAwLjUsIGltYWdlOiAiIiwgdGV4dFY6ICIiLAogICAgZm9udFdlaWdodDogNDAsIGxldHRlclNwYWNpbmc6ICJub3JtYWwiLAogIH07CgogIC8qKgogICAqIEBwYXJhbSB7SFRNTElucHV0RWxlbWVudH0gaW5wdXQKICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0KICAgKi8KICBjb25zdCBpc0NhbmNlbEV2ZW50U3VwcG9ydGVkID0gKGlucHV0KSA9PiB7CiAgICBpZiAoIm9uY2FuY2VsIiBpbiBpbnB1dCkgewogICAgICAvLyBDaHJvbWUgMTEzKywgU2FmYXJpIDE2LjQrCiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgLy8gRmlyZWZveCBpcyB3ZWlyZC4gY2FuY2VsIGlzIHN1cHBvcnRlZCBzaW5jZSBGaXJlZm94IDkxLCBidXQgb25jYW5jZWwgZG9lc24ndCBleGlzdC4KICAgIC8vIEZpcmVmb3ggOTEgaXMgZnJvbSBBdWd1c3QgMjAyMS4gVGhhdCdzIG9sZCBlbm91Z2ggdG8gbm90IGNhcmUgYWJvdXQgcHJldmlvdXMgdmVyc2lvbnMuCiAgICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygiRmlyZWZveCIpOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBhY2NlcHQgU2VlIE1PREVfIGNvbnN0YW50cyBhYm92ZQogICAqIEBwYXJhbSB7c3RyaW5nfSBhcyBTZWUgQVNfIGNvbnN0YW50cyBhYm92ZQogICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3ZlcnJpZGUgbWFrZXMgbW9kYWwgdXNlIHRoZSBGaWxlIEFQSSBpZiB0cnVlCiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gZm9ybWF0IGdpdmVuIGJ5IGFzIHBhcmFtZXRlcgogICAqLwogIGNvbnN0IHNob3dGaWxlUHJvbXB0ID0gKGFjY2VwdCwgYXMsIG92ZXJyaWRlKSA9PgogICAgbmV3IFByb21pc2UoKF9yZXNvbHZlKSA9PiB7CiAgICAgIC8vIFdlIGNhbid0IHJlbGlhYmx5IHNob3cgYW4gPGlucHV0PiBwaWNrZXIgd2l0aG91dCAidXNlciBpbnRlcmFjdGlvbiIgaW4gYWxsIGVudmlyb25tZW50cywKICAgICAgLy8gc28gd2UgaGF2ZSB0byBzaG93IG91ciBvd24gVUkgYW55d2F5cy4gV2UgbWF5IGFzIHdlbGwgdXNlIHRoaXMgdG8gaW1wbGVtZW50IHNvbWUgbmljZSBmZWF0dXJlcwogICAgICAvLyB0aGF0IG5hdGl2ZSBmaWxlIHBpY2tlcnMgZG9uJ3QgaGF2ZToKICAgICAgLy8gIC0gRWFzeSBkcmFnK2Ryb3AKICAgICAgLy8gIC0gUmVsaWFibGUgY2FuY2VsIGJ1dHRvbiAoaW5wdXQgY2FuY2VsIGV2ZW50IGlzIHN0aWxsIG5vdCBwZXJmZWN0KQogICAgICAvLyAgICBUaGlzIGlzIGltcG9ydGFudCBzbyB3ZSBjYW4gbWFrZSB0aGlzIGp1c3QgYSByZXBvcnRlciBpbnN0ZWFkIG9mIGEgY29tbWFuZCtoYXQgYmxvY2suCiAgICAgIC8vICAgIFdpdGhvdXQgYW4gaW50ZXJmYWNlLCB0aGUgc2NyaXB0IHdvdWxkIGJlIHN0YWxsZWQgaWYgdGhlIHByb21wdCB3YXMgY2FuY2VsbGVkLgoKICAgICAgLyoqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0ICovCiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHRleHQpID0+IHsKICAgICAgICBsZXQgY2xlYW5zZWRUeHQgPSB0ZXh0OwogICAgICAgIGlmIChvdmVycmlkZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAoW0FTX0hFWCwgQVNfQkFTRTY0XS5pbmNsdWRlcyhhcykpIHsKICAgICAgICAgICAgbGV0IHVyaSA9IGNsZWFuc2VkVHh0LnNwbGl0KCIsIik7CiAgICAgICAgICAgIGNsZWFuc2VkVHh0ID0gdXJpLnNwbGljZSgxLCB1cmkubGVuZ3RoKS5qb2luKCIsIik7CiAgICAgICAgICAgIGlmIChhcyA9PT0gQVNfSEVYKSBjbGVhbnNlZFR4dCA9IGJhc2U2NFRvSGV4KGNsZWFuc2VkVHh0LCAiICIpOwogICAgICAgICAgfQogICAgICAgICAgbGFzdERhdGEgPSBjbGVhbnNlZFR4dDsKICAgICAgICB9CiAgICAgICAgb3Blbk1vZGFscy0tOwogICAgICAgIF9yZXNvbHZlKGNsZWFuc2VkVHh0KTsKICAgICAgICB2bS5yZW5kZXJlci5yZW1vdmVPdmVybGF5KG91dGVyKTsKICAgICAgICBydW50aW1lLm9mZigiUFJPSkVDVF9TVE9QX0FMTCIsIGhhbmRsZVByb2plY3RTdG9wcGVkKTsKICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBoYW5kbGVLZXlEb3duLCB7CiAgICAgICAgICBjYXB0dXJlOiB0cnVlLAogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgb3Blbk1vZGFscysrOwogICAgICBsZXQgaXNSZWFkaW5nRmlsZSA9IGZhbHNlOwoKICAgICAgLyoqIEBwYXJhbSB7RmlsZX0gZmlsZSAqLwogICAgICBjb25zdCByZWFkRmlsZSA9IChmaWxlKSA9PiB7CiAgICAgICAgaWYgKGlzUmVhZGluZ0ZpbGUpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaXNSZWFkaW5nRmlsZSA9IHRydWU7CgogICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHsKICAgICAgICAgIEZpbGVOYW1lID0gZmlsZS5uYW1lOwogICAgICAgICAgRmlsZVNpemUgPSBmb3JtYXRGaWxlU2l6ZShmaWxlLnNpemUpOwogICAgICAgICAgUmF3RmlsZVNpemUgPSBmaWxlLnNpemU7CiAgICAgICAgICBjb25zdCByYXdEYXRlID0gbmV3IERhdGUoZmlsZS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgZmlsZURhdGUgPSByYXdEYXRlLnRvTG9jYWxlU3RyaW5nKCk7CiAgICAgICAgICBjYWxsYmFjaygvKiogQHR5cGUge3N0cmluZ30gKi8gKHJlYWRlci5yZXN1bHQpKTsKICAgICAgICB9OwogICAgICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4gewogICAgICAgICAgY29uc29sZS5lcnJvcigiRmFpbGVkIHRvIHJlYWQgZmlsZSBhcyB0ZXh0IiwgcmVhZGVyLmVycm9yKTsKICAgICAgICAgIGNhbGxiYWNrKCIiKTsKICAgICAgICB9OwogICAgICAgIGlmIChvdmVycmlkZSAhPT0gdW5kZWZpbmVkKSBjYWxsYmFjayhmaWxlKTsKICAgICAgICBlbHNlIGlmIChhcyA9PT0gQVNfVEVYVCkgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7CiAgICAgICAgZWxzZSBpZiAoYXMgPT09IEFTX0JVRkZFUikgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgICAgIGVsc2UgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7CiAgICAgIH07CgogICAgICAvKiogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBlICovCiAgICAgIGNvbnN0IGhhbmRsZUtleURvd24gPSAoZSkgPT4gewogICAgICAgIGlmIChlLmtleSA9PT0gIkVzY2FwZSIpIHsKICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICBjYWxsYmFjaygiIik7CiAgICAgICAgfQogICAgICB9OwogICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoImtleWRvd24iLCBoYW5kbGVLZXlEb3duLCB7CiAgICAgICAgY2FwdHVyZTogdHJ1ZSwKICAgICAgfSk7CgogICAgICBjb25zdCBoYW5kbGVQcm9qZWN0U3RvcHBlZCA9ICgpID0+IHsKICAgICAgICBjYWxsYmFjaygiIik7CiAgICAgIH07CiAgICAgIHJ1bnRpbWUub24oIlBST0pFQ1RfU1RPUF9BTEwiLCBoYW5kbGVQcm9qZWN0U3RvcHBlZCk7CgogICAgICBjb25zdCBoYW5kbGVPdmVycmlkZSA9IGFzeW5jICgpID0+IHsKICAgICAgICBsZXQgZmlsZUluZm87CiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIC8vIGV4ZWN1dGUgbm9ybWFsIGJlaGF2aW91cgogICAgICAgICAgaW5wdXQuY2xpY2soKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKG92ZXJyaWRlID09PSAiZm9sZGVyIikgewogICAgICAgICAgICAgIGZpbGVJbmZvID0gYXdhaXQgd2luZG93LnNob3dEaXJlY3RvcnlQaWNrZXIoewogICAgICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLAogICAgICAgICAgICAgICAgdHlwZXM6IFt7IGFjY2VwdDogeyAiKi8qIjogW10gfSB9XSwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBmaWxlSW5mbyA9IGF3YWl0IHdpbmRvdy5zaG93T3BlbkZpbGVQaWNrZXIoewogICAgICAgICAgICAgICAgbXVsdGlwbGU6IGZhbHNlLAogICAgICAgICAgICAgICAgdHlwZXM6IFt7IGFjY2VwdDogeyAiKi8qIjogYWNjZXB0IH0gfV0sCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2FsbGJhY2soZmlsZUluZm8pOwogICAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgIGNhbGxiYWNrKCIiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH07CgogICAgICBjb25zdCBJTklUSUFMX0JPUkRFUl9DT0xPUiA9IHNlbGVjdG9yT3B0aW9ucy5ib3JkZXJDb2xvcjsKICAgICAgY29uc3QgRFJPUFBJTkdfQk9SREVSX0NPTE9SID0gIiMwM2E5ZmMiOwoKICAgICAgY29uc3Qgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgb3V0ZXIuc3R5bGUucG9pbnRlckV2ZW50cyA9ICJhdXRvIjsKICAgICAgb3V0ZXIuc3R5bGUud2lkdGggPSAiMTAwJSI7CiAgICAgIG91dGVyLnN0eWxlLmhlaWdodCA9ICIxMDAlIjsKICAgICAgb3V0ZXIuc3R5bGUuZGlzcGxheSA9ICJmbGV4IjsKICAgICAgb3V0ZXIuc3R5bGUuYWxpZ25JdGVtcyA9ICJjZW50ZXIiOwogICAgICBvdXRlci5zdHlsZS5qdXN0aWZ5Q29udGVudCA9ICJjZW50ZXIiOwogICAgICBvdXRlci5zdHlsZS5jb2xvclNjaGVtZSA9ICJsaWdodCI7CiAgICAgIGlmIChvdmVycmlkZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgLy8gdGhlIEZpbGUgQVBJIGNhbnQgZXhhY3RseSBzdXBwb3J0IGRyYWdnaW5nIGZpbGVzCiAgICAgICAgb3V0ZXIuYWRkRXZlbnRMaXN0ZW5lcigiZHJhZ292ZXIiLCAoZSkgPT4gewogICAgICAgICAgaWYgKGUuZGF0YVRyYW5zZmVyLnR5cGVzLmluY2x1ZGVzKCJGaWxlcyIpKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICJjb3B5IjsKICAgICAgICAgICAgbW9kYWwuc3R5bGUuYm9yZGVyQ29sb3IgPSBEUk9QUElOR19CT1JERVJfQ09MT1I7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgb3V0ZXIuYWRkRXZlbnRMaXN0ZW5lcigiZHJhZ2xlYXZlIiwgKCkgPT4gewogICAgICAgICAgbW9kYWwuc3R5bGUuYm9yZGVyQ29sb3IgPSBJTklUSUFMX0JPUkRFUl9DT0xPUjsKICAgICAgICB9KTsKICAgICAgICBvdXRlci5hZGRFdmVudExpc3RlbmVyKCJkcm9wIiwgKGUpID0+IHsKICAgICAgICAgIGNvbnN0IGZpbGUgPSBlLmRhdGFUcmFuc2Zlci5maWxlc1swXTsKICAgICAgICAgIGlmIChmaWxlKSB7CiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgcmVhZEZpbGUoZmlsZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgb3V0ZXIuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCAoZSkgPT4gewogICAgICAgIGlmIChlLnRhcmdldCA9PT0gb3V0ZXIpIHsKICAgICAgICAgIGNhbGxiYWNrKCIiKTsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJidXR0b24iKTsKICAgICAgbW9kYWwuaWQgPSAidHctZmlsZXMtbW9kYWwiOwogICAgICBtb2RhbC5zdHlsZS5ib3hTaGFkb3cgPSAiMCAwIDEwcHggLTVweCBjdXJyZW50Q29sb3IiOwogICAgICBtb2RhbC5zdHlsZS5jdXJzb3IgPSAicG9pbnRlciI7CiAgICAgIG1vZGFsLnN0eWxlLmJhY2tncm91bmRTaXplID0gImNvdmVyIjsKICAgICAgbW9kYWwuc3R5bGUucGFkZGluZyA9ICIxNnB4IjsKICAgICAgbW9kYWwuc3R5bGUuYm9yZGVyID0gYDhweCBkYXNoZWQgJHtJTklUSUFMX0JPUkRFUl9DT0xPUn1gOwogICAgICBtb2RhbC5zdHlsZS5wb3NpdGlvbiA9ICJyZWxhdGl2ZSI7CiAgICAgIG1vZGFsLnN0eWxlLnRleHRBbGlnbiA9ICJjZW50ZXIiOwogICAgICBtb2RhbC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGFzeW5jICgpID0+IHsKICAgICAgICAvLyB3aWxsIGV4ZWN1dGUgImlucHV0LmNsaWNrKCkiIGlmIG92ZXJyaWRlIGlzICJ1bmRlZmluZWQiCiAgICAgICAgYXdhaXQgaGFuZGxlT3ZlcnJpZGUoKTsKICAgICAgfSk7CiAgICAgIG1vZGFsLmZvY3VzKCk7CiAgICAgIG91dGVyLmFwcGVuZENoaWxkKG1vZGFsKTsKCiAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW5wdXQiKTsKICAgICAgaW5wdXQudHlwZSA9ICJmaWxlIjsKICAgICAgaW5wdXQuYWNjZXB0ID0gYWNjZXB0OwogICAgICBpZiAob3ZlcnJpZGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsIChlKSA9PiB7CiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yCiAgICAgICAgICBjb25zdCBmaWxlID0gZS50YXJnZXQuZmlsZXNbMF07CiAgICAgICAgICBpZiAoZmlsZSkgewogICAgICAgICAgICByZWFkRmlsZShmaWxlKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgdGl0bGUudGV4dENvbnRlbnQgPQogICAgICAgIG92ZXJyaWRlID09PSB1bmRlZmluZWQKICAgICAgICAgID8gU2NyYXRjaC50cmFuc2xhdGUoIlNlbGVjdCBvciBkcm9wIGZpbGUiKQogICAgICAgICAgOiBTY3JhdGNoLnRyYW5zbGF0ZSgiU2VsZWN0IGZpbGUiKTsKICAgICAgdGl0bGUuc3R5bGUubWFyZ2luQm90dG9tID0gIjhweCI7CiAgICAgIG1vZGFsLmFwcGVuZENoaWxkKHRpdGxlKTsKCiAgICAgIGNvbnN0IHN1YnRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIGNvbnN0IGZvcm1hdHRlZEFjY2VwdCA9IGFjY2VwdCB8fCBTY3JhdGNoLnRyYW5zbGF0ZSgiYW55Iik7CiAgICAgIHN1YnRpdGxlLnRleHRDb250ZW50ID0gU2NyYXRjaC50cmFuc2xhdGUoCiAgICAgICAgewogICAgICAgICAgZGVmYXVsdDogIkFjY2VwdGVkIGZvcm1hdHM6IHtmb3JtYXRzfSIsCiAgICAgICAgICBkZXNjcmlwdGlvbjogIltmb3JtYXRzXSBpcyByZXBsYWNlZCB3aXRoIGEgY29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgZmlsZSB0eXBlcyBlZzogLnR4dCwgLm1wMywgLnBuZyBvciB0aGUgd29yZCBhbnkiLAogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgZm9ybWF0czogZm9ybWF0dGVkQWNjZXB0LAogICAgICAgIH0KICAgICAgKTsKICAgICAgbW9kYWwuYXBwZW5kQ2hpbGQoc3VidGl0bGUpOwoKICAgICAgLy8gVG8gYXZvaWQgdGhlIHNjcmlwdCBnZXR0aW5nIHN0YWxsZWQgZm9yZXZlciwgaWYgY2FuY2VsIGlzbid0IHN1cHBvcnRlZCwgd2UnbGwganVzdCBmb3JjaWJseQogICAgICAvLyBzaG93IG91ciBtb2RhbC4KICAgICAgaWYgKAogICAgICAgIG9wZW5GaWxlU2VsZWN0b3JNb2RlID09PSBNT0RFX09OTFlfU0VMRUNUT1IgJiYKICAgICAgICAhaXNDYW5jZWxFdmVudFN1cHBvcnRlZChpbnB1dCkKICAgICAgKSB7CiAgICAgICAgb3BlbkZpbGVTZWxlY3Rvck1vZGUgPSBNT0RFX0lNTUVESUFURUxZX1NIT1dfU0VMRUNUT1I7CiAgICAgIH0KCiAgICAgIGlmIChvcGVuRmlsZVNlbGVjdG9yTW9kZSAhPT0gTU9ERV9PTkxZX1NFTEVDVE9SKSB7CiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IHZtLnJlbmRlcmVyLmFkZE92ZXJsYXkob3V0ZXIsICJzY2FsZSIpOwogICAgICAgIG92ZXJsYXkuY29udGFpbmVyLnN0eWxlLnpJbmRleCA9ICIxMDAiOwogICAgICB9CgogICAgICBpZiAoCiAgICAgICAgb3BlbkZpbGVTZWxlY3Rvck1vZGUgPT09IE1PREVfSU1NRURJQVRFTFlfU0hPV19TRUxFQ1RPUiB8fAogICAgICAgIG9wZW5GaWxlU2VsZWN0b3JNb2RlID09PSBNT0RFX09OTFlfU0VMRUNUT1IKICAgICAgKSB7CiAgICAgICAgLy8gd2lsbCBydW4gImlucHV0LmNsaWNrKCkiIGlmIG92ZXJyaWRlIGlzICJ1bmRlZmluZWQiCiAgICAgICAgaGFuZGxlT3ZlcnJpZGUoKTsKICAgICAgfQoKICAgICAgaWYgKG9wZW5GaWxlU2VsZWN0b3JNb2RlID09PSBNT0RFX09OTFlfU0VMRUNUT1IpIHsKICAgICAgICAvLyBOb3RlIHRoYXQgYnJvd3NlciBzdXBwb3J0IGZvciBjYW5jZWwgaXMgY3VycmVudGx5IHF1aXRlIGJhZAogICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoImNhbmNlbCIsICgpID0+IHsKICAgICAgICAgIGNhbGxiYWNrKCIiKTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdXBkYXRlTW9kYWxWaXN1YWxzKCk7CiAgICB9KTsKCiAgY29uc3QgdXBkYXRlTW9kYWxWaXN1YWxzID0gKCkgPT4gewogICAgY29uc3QgYWxsTW9kYWxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgYnV0dG9uW2lkPSJ0dy1maWxlcy1tb2RhbCJdYCk7CiAgICBhbGxNb2RhbHMuZm9yRWFjaCgobW9kYWwpID0+IHsKICAgICAgbW9kYWwucGFyZW50Tm9kZS5zdHlsZS5iYWNrZ3JvdW5kID0gYHJnYmEoMCwgMCwgMCwgJHtzZWxlY3Rvck9wdGlvbnMuc2hhZG93fSlgOwogICAgICBtb2RhbC5wYXJlbnROb2RlLnN0eWxlLmNvbG9yID0gc2VsZWN0b3JPcHRpb25zLnRleHRDb2xvcjsKCiAgICAgIG1vZGFsLnN0eWxlLmZvbnQgPSBzZWxlY3Rvck9wdGlvbnMuZm9udDsKICAgICAgbW9kYWwuc3R5bGUuZm9udEZhbWlseSA9IHNlbGVjdG9yT3B0aW9ucy5mb250OwogICAgICBtb2RhbC5zdHlsZS5iYWNrZ3JvdW5kID0gc2VsZWN0b3JPcHRpb25zLmltYWdlCiAgICAgICAgPyBzZWxlY3Rvck9wdGlvbnMuaW1hZ2UKICAgICAgICA6IHNlbGVjdG9yT3B0aW9ucy5vdXRlcjsKICAgICAgbW9kYWwuc3R5bGUuYm9yZGVyUmFkaXVzID0gYCR7c2VsZWN0b3JPcHRpb25zLmJvcmRlclJhZGl1c31weGA7CiAgICAgIG1vZGFsLnN0eWxlLmJvcmRlclN0eWxlID0gc2VsZWN0b3JPcHRpb25zLmJvcmRlclR5cGU7CiAgICAgIG1vZGFsLnN0eWxlLmJvcmRlckNvbG9yID0gc2VsZWN0b3JPcHRpb25zLmJvcmRlckNvbG9yOwoKICAgICAgY29uc3QgdGl0bGUgPSBtb2RhbC5jaGlsZHJlblswXTsKICAgICAgaWYgKHNlbGVjdG9yT3B0aW9ucy50ZXh0VikgdGl0bGUudGV4dENvbnRlbnQgPSBzZWxlY3Rvck9wdGlvbnMudGV4dFY7CiAgICAgIHRpdGxlLnN0eWxlLmNvbG9yID0gc2VsZWN0b3JPcHRpb25zLnRleHRDb2xvcjsKICAgICAgdGl0bGUuc3R5bGUuZm9udFNpemUgPSBgJHtzZWxlY3Rvck9wdGlvbnMuc2l6ZUZvbnR9ZW1gOwogICAgICB0aXRsZS5zdHlsZS5mb250V2VpZ2h0ID0gc2VsZWN0b3JPcHRpb25zLmZvbnRXZWlnaHQgKiA5OwogICAgICB0aXRsZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gYCR7c2VsZWN0b3JPcHRpb25zLmxldHRlclNwYWNpbmd9cHhgOwoKICAgICAgY29uc3Qgc3VidGl0bGUgPSBtb2RhbC5jaGlsZHJlblsxXTsKICAgICAgc3VidGl0bGUuc3R5bGUuY29sb3IgPSBzZWxlY3Rvck9wdGlvbnMudGV4dENvbG9yOwogICAgICBzdWJ0aXRsZS5zdHlsZS5mb250U2l6ZSA9IGAke3NlbGVjdG9yT3B0aW9ucy5zaXplRm9udCAtIDAuNX1lbWA7CiAgICAgIHN1YnRpdGxlLnN0eWxlLmZvbnRXZWlnaHQgPSBzZWxlY3Rvck9wdGlvbnMuZm9udFdlaWdodCAqIDk7CiAgICAgIHN1YnRpdGxlLnN0eWxlLmxldHRlclNwYWNpbmcgPSBgJHtzZWxlY3Rvck9wdGlvbnMubGV0dGVyU3BhY2luZ31weGA7CiAgICB9KTsKICB9OwoKICAvLyBiYWNrdXAgZG93bmxvYWQgc3lzdGVtIChQZW5ndWlubW9kIGRvZXMgbm90IGhhdmUgU2NyYXRjaC5kb3dubG9hZCkKICBjb25zdCBkb3dubG9hZEJhY2t1cFVSTCA9ICh1cmwsIGZpbGUpID0+IHsKICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICBsaW5rLmhyZWYgPSB1cmw7CiAgICBsaW5rLmRvd25sb2FkID0gZmlsZTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7CiAgICBsaW5rLmNsaWNrKCk7CiAgICBsaW5rLnJlbW92ZSgpOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7QmxvYn0gYmxvYiBEYXRhIHRvIGRvd25sb2FkCiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUgTmFtZSBvZiB0aGUgZmlsZQogICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fQogICAqLwogIGNvbnN0IGRvd25sb2FkQmxvYiA9IGFzeW5jIChibG9iLCBmaWxlKSA9PiB7CiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgdHJ5IHsKICAgICAgaWYgKGlzUE0pIHsKICAgICAgICBkb3dubG9hZEJhY2t1cFVSTCh1cmwsIGZpbGUpOwogICAgICAgIChyZXF1ZXN0SWRsZUNhbGxiYWNrID8/IHNldFRpbWVvdXQpKCgpID0+IFVSTC5yZXZva2VPYmplY3RVUkwodXJsKSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9IGVsc2UgYXdhaXQgU2NyYXRjaC5kb3dubG9hZCh1cmwsIGZpbGUpOwogICAgfSBjYXRjaCAoZSkgewogICAgICBjb25zb2xlLmVycm9yKGUpOwogICAgfQogICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwKICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0KICAgKi8KICBjb25zdCBpc0RhdGFVUkwgPSAodXJsKSA9PiB7CiAgICB0cnkgewogICAgICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKHVybCk7CiAgICAgIHJldHVybiBwYXJzZWQucHJvdG9jb2wgPT09ICJkYXRhOiI7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9OwoKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsCiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGUKICAgKi8KICBjb25zdCBkb3dubG9hZFVudHJ1c3RlZFVSTCA9IGFzeW5jICh1cmwsIGZpbGUpID0+IHsKICAgIGlmIChpc0RhdGFVUkwodXJsKSkgewogICAgICBpZiAoaXNQTSkgZG93bmxvYWRCYWNrdXBVUkwodXJsLCBmaWxlKTsKICAgICAgZWxzZSB7CiAgICAgICAgLy8gVE9ETzogU2NyYXRjaC5mZXRjaCdzIGJldHRlciBoYW5kbGluZyBvZiBkYXRhOiBtZWFucyB0aGlzIGlzIHByb2JhYmx5IG5vdCBuZWVkZWQgYW55bW9yZQogICAgICAgIC8vIGFuZCBpdCB0aGUgYmxvYjogcHJvYmFibHkgd29ya3MgYmV0dGVyIHdpdGggYmlnIGZpbGVzCiAgICAgICAgcmV0dXJuIFNjcmF0Y2guZG93bmxvYWQodXJsLCBmaWxlKTsKICAgICAgfQogICAgfQoKICAgIGNvbnN0IHJlcyA9IGF3YWl0IFNjcmF0Y2guZmV0Y2godXJsKTsKICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXMuYmxvYigpOwogICAgYXdhaXQgZG93bmxvYWRCbG9iKGJsb2IsIGZpbGUpOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplCiAgICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIGJ5dGUgc2l6ZQogICAqLwogIGNvbnN0IGZvcm1hdEZpbGVTaXplID0gKHNpemUpID0+IHsKICAgIGNvbnN0IHVuaXRzID0gWyJCIiwgIktCIiwgIk1CIiwgIkdCIiwgIlRCIl07CiAgICBsZXQgaSA9IDA7CiAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0ICYmIGkgPCB1bml0cy5sZW5ndGggLSAxKSB7CiAgICAgIHNpemUgLz0gMTAyNDsKICAgICAgaSsrOwogICAgfQogICAgcmV0dXJuIGAke3NpemUudG9GaXhlZCgyKX0gJHt1bml0c1tpXX1gOwogIH07CgogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIKICAgKiBAcGFyYW0ge3N0cmluZ30gZGVsaW0KICAgKiBAcmV0dXJucyB7c3RyaW5nfSBoZXggc3BsaXQgYnkgZGVsaW1pdGVyCiAgICovCiAgZnVuY3Rpb24gYmFzZTY0VG9IZXgoc3RyLCBkZWxpbSkgewogICAgY29uc3QgcmF3ID0gYXRvYihzdHIpOwogICAgbGV0IHJlc3VsdCA9ICIiOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXcubGVuZ3RoOyBpKyspIHsKICAgICAgY29uc3QgaGV4ID0gcmF3LmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpOwogICAgICByZXN1bHQgKz0gZGVsaW0udG9TdHJpbmcoKSArIChoZXgubGVuZ3RoID09PSAyID8gaGV4IDogIjAiICsgaGV4KTsKICAgIH0KICAgIHJldHVybiByZXN1bHQudG9VcHBlckNhc2UoKTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyCiAgICogQHJldHVybnMge3N0cmluZ30gYmFzZTY0CiAgICovCiAgZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjQoYnVmZmVyKSB7CiAgICB2YXIgYmluYXJ5ID0gIiI7CiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpOwogICAgdmFyIGxlbiA9IGJ5dGVzLmJ5dGVMZW5ndGg7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGJpbmFyeSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldKTsKICAgIH0KICAgIHJldHVybiBidG9hKGJpbmFyeSk7CiAgfQoKICBjbGFzcyBmaWxlc0V4cGFuZGVkIHsKICAgIGNvbnN0cnVjdG9yKCkgewogICAgICB0aGlzLl9zaG93VW5zYWZlT3B0aW9ucyA9IGZhbHNlOwogICAgfQogICAgZ2V0SW5mbygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBpZDogImZpbGVzRXhwYW5kZWQiLAogICAgICAgIG5hbWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJGaWxlcyBFeHBhbmRlZCIpLAogICAgICAgIG1lbnVJY29uVVJJLAogICAgICAgIGNvbG9yMTogIiNmY2IxMDMiLAogICAgICAgIGNvbG9yMjogIiNkYjlhMzciLAogICAgICAgIGNvbG9yMzogIiNkYjg5MzciLAogICAgICAgIGJsb2NrczogWwogICAgICAgICAgewogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkxBQkVMLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiVXBsb2FkaW5nIiksCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzaG93UGlja2VyIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIm9wZW4gYSBmaWxlIiksCiAgICAgICAgICAgIGRpc2FibGVNb25pdG9yOiB0cnVlLAogICAgICAgICAgICBoaWRlRnJvbVBhbGV0dGU6IHRydWUsCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzaG93UGlja2VyRXh0ZW5zaW9ucyIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJvcGVuIGEgW2V4dGVuc2lvbl0gZmlsZSIpLAogICAgICAgICAgICBoaWRlRnJvbVBhbGV0dGU6IHRydWUsCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIGV4dGVuc2lvbjogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAiLnR4dCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInNob3dQaWNrZXJBcyIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJvcGVuIGEgZmlsZSBhcyBbYXNdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIGFzOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiZW5jb2RpbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzaG93UGlja2VyRXh0ZW5zaW9uc0FzIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIm9wZW4gYSBbZXh0ZW5zaW9uXSBmaWxlIGFzIFthc10iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgZXh0ZW5zaW9uOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICIudHh0IiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGFzOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiZW5jb2RpbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkxBQkVMLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiRG93bmxvYWRpbmciKSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImRvd25sb2FkIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiZG93bmxvYWQgW3RleHRdIGFzIFtmaWxlXSIpLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICB0ZXh0OiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJIZWxsbywgd29ybGQhIiksCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmaWxlOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJzYXZlLnR4dCIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJkb3dubG9hZFVSTCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImRvd25sb2FkIFVSTCBbdXJsXSBhcyBbZmlsZV0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgdXJsOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICJkYXRhOnRleHQvcGxhaW47YmFzZTY0LFNHVnNiRzhzSUhkdmNteGtJUT09IiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGZpbGU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2NyYXRjaC50cmFuc2xhdGUoInNhdmUudHh0IiksCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuTEFCRUwsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJFeHRyYSIpLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAic2V0T3Blbk1vZGUiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzZXQgb3BlbiBmaWxlIHNlbGVjdG9yIG1vZGUgdG8gW21vZGVdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIG1vZGU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogTU9ERV9NT0RBTCwKICAgICAgICAgICAgICAgIG1lbnU6ICJhdXRvbWF0aWNhbGx5T3BlbiIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImZpbGVJbmZvIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImxhc3Qgb3BlbmVkIGZpbGUgW0ZPUk1BVF0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgRk9STUFUOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiRklMRV9JTkZPIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgICItLS0iLAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJtb2RhbE9wZW4iLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkJPT0xFQU4sCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJpcyBtb2RhbCBvcGVuPyIpLAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiZmluZEZpbGVTaXplIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIltUWVBFXSBmaWxlIHNpemUgb2YgW0ZJTEVdIiksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIFRZUEU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIG1lbnU6ICJGSUxFX1NJWkVTIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIEZJTEU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2NyYXRjaC50cmFuc2xhdGUoIkhlbGxvLCB3b3JsZCEiKSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIHsgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5MQUJFTCwgdGV4dDogIlN0b3JlZCBGaWxlcyIgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiY2hlY2tGaWxlQVBJIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CT09MRUFOLAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiaXMgZmlsZSB3cml0aW5nIHN1cHBvcnRlZD8iKSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImFsbFN0b3JlZCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJhbGwgc3RvcmVkIGZpbGVzIiksCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzZXRTdG9yZWRGaWxlIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgKICAgICAgICAgICAgICAib3BlbiBuZXcgc3RvcmVkIFtGSUxFXSBmaWxlIG5hbWVkIFtOQU1FXSBhcyBbVFlQRV0iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIE5BTUU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2NyYXRjaC50cmFuc2xhdGUoIm15LWZpbGUtMSIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgRklMRTogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAiLnR4dCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBUWVBFOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiZW5jb2RpbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzdG9yZWRGb2xkZXIiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKAogICAgICAgICAgICAgICJvcGVuIGZvbGRlciBhbmQgc3RvcmUgZmlsZXMgYXMgW1RZUEVdIHdpdGggbmFtZSBbTkFNRV0iCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIFRZUEU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIG1lbnU6ICJlbmNvZGluZyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBOQU1FOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJteS1mb2xkZXItMSIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJkZWxldGVTdG9yZWRGaWxlIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiZGVsZXRlIGZpbGUgW05BTUVdIGZyb20gW09QVElPTl0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgTkFNRTogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBTY3JhdGNoLnRyYW5zbGF0ZSgibXktZmlsZS0xIiksCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBPUFRJT046IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIG1lbnU6ICJERUxFVElPTiIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICAiLS0tIiwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAidXBkYXRlRmlsZSIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIndyaXRlIFtUWFRdIHRvIHN0b3JlZCBmaWxlIFtOQU1FXSIpLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBUWFQ6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2NyYXRjaC50cmFuc2xhdGUoIm5ldyBjb250ZW50IiksCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBOQU1FOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFNjcmF0Y2gudHJhbnNsYXRlKCJteS1maWxlLTEiKSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAidXBkYXRlRmlsZVVSTCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIndyaXRlIFVSTCBbVVJMXSB0byBzdG9yZWQgZmlsZSBbTkFNRV0iKSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgVVJMOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICJkYXRhOnRleHQvcGxhaW47YmFzZTY0LFNHVnNiRzhzSUhkdmNteGtJUT09IiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIE5BTUU6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogU2NyYXRjaC50cmFuc2xhdGUoIm15LWZpbGUtMSIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJzdG9yZWRJbmZvIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5SRVBPUlRFUiwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIltGT1JNQVRdIGluIHN0b3JlZCBmaWxlIFtOQU1FXSIpLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBGT1JNQVQ6IHsKICAgICAgICAgICAgICAgIHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLlNUUklORywKICAgICAgICAgICAgICAgIG1lbnU6ICJGSUxFX0lORk8iLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgTkFNRTogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBTY3JhdGNoLnRyYW5zbGF0ZSgibXktZmlsZS0xIiksCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICAiLS0tIiwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAibW92ZVN0b3JhZ2UiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJtaWdyYXRlIGZpbGVzIHRvIENTVCdzIFpJUCBFeHRlbnNpb24iKSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuTEFCRUwsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJWaXN1YWxzIiksCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBmdW5jOiAidG9nZ2xlVmlzIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5CVVRUT04sCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKAogICAgICAgICAgICAgIGAke2VuYWJsZVZpcyA/ICJFbiIgOiAiRGlzIn1hYmxlIEN1c3RvbWl6YXRpb25gCiAgICAgICAgICAgICksCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJyZXNldFN0eWxlIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgicmVzZXQgc2VsZWN0b3Igc3R5bGUgdG8gZGVmYXVsdCIpLAogICAgICAgICAgICBoaWRlRnJvbVBhbGV0dGU6IGVuYWJsZVZpcywKICAgICAgICAgIH0sCiAgICAgICAgICAiLS0tIiwKICAgICAgICAgIHsKICAgICAgICAgICAgb3Bjb2RlOiAiYm9yZGVyQ29sb3JzIiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgic2V0IHNlbGVjdG9yIFtPUFRJT05dIGNvbG9yIHRvIFtDT0xPUl0iKSwKICAgICAgICAgICAgaGlkZUZyb21QYWxldHRlOiBlbmFibGVWaXMsCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIE9QVElPTjogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgbWVudTogInZpc3VhbENvbG9ycyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBDT0xPUjogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuQ09MT1IsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInZpc3VhbHNTZWxlY3QiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzZXQgc2VsZWN0b3IgW09QVElPTl0gdG8gW0FNVF0iKSwKICAgICAgICAgICAgaGlkZUZyb21QYWxldHRlOiBlbmFibGVWaXMsCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIE9QVElPTjogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgbWVudTogInZpc3VhbE9wdGlvbnMiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgQU1UOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5OVU1CRVIsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IDE1LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJpbWFnZVNldCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuQ09NTUFORCwKICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInNldCBzZWxlY3RvciBpbWFnZSB0byBbSU1HXSIpLAogICAgICAgICAgICBoaWRlRnJvbVBhbGV0dGU6IGVuYWJsZVZpcywKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgSU1HOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6ICJodHRwczovL2V4dGVuc2lvbnMudHVyYm93YXJwLm9yZy9kYW5nby5wbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgLyogRGVwcmVjYXRpb24gTWFya2VyICovCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInNjYWxlSW1hZ2UiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6ICJzY2FsZSBzZWxlY3RvciBpbWFnZSB0byBbU0NBTEVdJSIsCiAgICAgICAgICAgIGhpZGVGcm9tUGFsZXR0ZTogdHJ1ZSwKICAgICAgICAgICAgYXJndW1lbnRzOiB7IFNDQUxFOiB7IHR5cGU6IFNjcmF0Y2guQXJndW1lbnRUeXBlLk5VTUJFUiB9IH0KICAgICAgICAgIH0sCiAgICAgICAgICAvKiBNYXJrZXIgRW5kICovCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogImJvcmRlclR5cGVTZXQiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzZXQgc2VsZWN0b3IgYm9yZGVyIHR5cGUgdG8gW1RZUEVdIiksCiAgICAgICAgICAgIGhpZGVGcm9tUGFsZXR0ZTogZW5hYmxlVmlzLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBUWVBFOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiYm9yZGVyVHlwZXMiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJmb250U2V0IiwKICAgICAgICAgICAgYmxvY2tUeXBlOiBTY3JhdGNoLkJsb2NrVHlwZS5DT01NQU5ELAogICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgic2V0IHNlbGVjdG9yIGZvbnQgdG8gW0ZPTlRdIiksCiAgICAgICAgICAgIGhpZGVGcm9tUGFsZXR0ZTogZW5hYmxlVmlzLAogICAgICAgICAgICBhcmd1bWVudHM6IHsKICAgICAgICAgICAgICBGT05UOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAiZm9udCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgIG9wY29kZTogInRleHRTZXQiLAogICAgICAgICAgICBibG9ja1R5cGU6IFNjcmF0Y2guQmxvY2tUeXBlLkNPTU1BTkQsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzZXQgZmlsZSBzZWxlY3RvciB0ZXh0IHRvIFtURVhUXSIpLAogICAgICAgICAgICBoaWRlRnJvbVBhbGV0dGU6IGVuYWJsZVZpcywKICAgICAgICAgICAgYXJndW1lbnRzOiB7CiAgICAgICAgICAgICAgVEVYVDogewogICAgICAgICAgICAgICAgdHlwZTogU2NyYXRjaC5Bcmd1bWVudFR5cGUuU1RSSU5HLAogICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBTY3JhdGNoLnRyYW5zbGF0ZSgiSW5zZXJ0IEZpbGUgSGVyZSIpLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICBvcGNvZGU6ICJjdXJyZW50WCIsCiAgICAgICAgICAgIGJsb2NrVHlwZTogU2NyYXRjaC5CbG9ja1R5cGUuUkVQT1JURVIsCiAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJjdXJyZW50IHNlbGVjdG9yIFtUSElOR10iKSwKICAgICAgICAgICAgaGlkZUZyb21QYWxldHRlOiBlbmFibGVWaXMsCiAgICAgICAgICAgIGFyZ3VtZW50czogewogICAgICAgICAgICAgIFRISU5HOiB7CiAgICAgICAgICAgICAgICB0eXBlOiBTY3JhdGNoLkFyZ3VtZW50VHlwZS5TVFJJTkcsCiAgICAgICAgICAgICAgICBtZW51OiAibW9kYWxWaXN1YWxzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICBdLAogICAgICAgIG1lbnVzOiB7CiAgICAgICAgICBmb250OiB7CiAgICAgICAgICAgIGFjY2VwdFJlcG9ydGVyczogdHJ1ZSwKICAgICAgICAgICAgaXRlbXM6ICJnZXRGb250cyIsCiAgICAgICAgICB9LAogICAgICAgICAgZW5jb2Rpbmc6IHsKICAgICAgICAgICAgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLAogICAgICAgICAgICBpdGVtczogImdldEVuY29kaW5ncyIsCiAgICAgICAgICB9LAogICAgICAgICAgYXV0b21hdGljYWxseU9wZW46IHsKICAgICAgICAgICAgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLAogICAgICAgICAgICBpdGVtczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzaG93IG1vZGFsIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogTU9ERV9NT0RBTCwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJvcGVuIHNlbGVjdG9yIGltbWVkaWF0ZWx5IiksCiAgICAgICAgICAgICAgICB2YWx1ZTogTU9ERV9JTU1FRElBVEVMWV9TSE9XX1NFTEVDVE9SLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgLy8gV2lsbCBub3Qgd29yayBpZiB0aGUgYnJvd3NlciBkb2Vzbid0IHRoaW5rIHdlIGFyZSByZXNwb25kaW5nIHRvIGEgY2xpY2sgZXZlbnQuCiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgib25seSBzaG93IHNlbGVjdG9yICh1bnJlbGlhYmxlKSIpLAogICAgICAgICAgICAgICAgdmFsdWU6IE1PREVfT05MWV9TRUxFQ1RPUiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICAgIG1vZGFsVmlzdWFsczogewogICAgICAgICAgICBhY2NlcHRSZXBvcnRlcnM6IHRydWUsCiAgICAgICAgICAgIGl0ZW1zOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImJvcmRlciBjb2xvciIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJib3JkZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInRleHQgY29sb3IiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAidGV4dCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiYmFja2dyb3VuZCBjb2xvciIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJvdXRlciIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgib3ZlcmxheSBvcGFjaXR5IiksCiAgICAgICAgICAgICAgICB2YWx1ZTogInNoYWRvdyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiZm9udCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJmb250IiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJmb250IHNpemUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAic2l6ZUZvbnQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImZvbnQgdGhpY2tuZXNzIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogImZvbnRXZWlnaHQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImxldHRlciBzcGFjaW5nIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogImxldHRlclNwYWNpbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImJvcmRlciByYWRpdXMiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiYm9yZGVyUmFkaXVzIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJib3JkZXIgdHlwZSIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJib3JkZXJUeXBlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJiYWNrZ3JvdW5kIGltYWdlIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogImltYWdlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJ0ZXh0IiksCiAgICAgICAgICAgICAgICB2YWx1ZTogInRleHRWIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICAgIEZJTEVfU0laRVM6IHsKICAgICAgICAgICAgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLAogICAgICAgICAgICBpdGVtczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJmb3JtYXR0ZWQiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiZm9ybWF0dGVkIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJ1bmZvcm1hdHRlZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJ1bmZvcm1hdHRlZCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXSwKICAgICAgICAgIH0sCiAgICAgICAgICBGSUxFX0lORk86IHsKICAgICAgICAgICAgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLAogICAgICAgICAgICBpdGVtczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJkYXRhIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogImRhdGEiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIm5hbWUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAibmFtZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgibW9kaWZpZWQgZGF0ZSIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJtb2RpZmllZCBkYXRlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJzaXplIGZvcm1hdHRlZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJzaXplIGZvcm1hdHRlZCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgic2l6ZSB1bmZvcm1hdHRlZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJzaXplIHVuZm9ybWF0dGVkIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICAgIERFTEVUSU9OOiB7CiAgICAgICAgICAgIGFjY2VwdFJlcG9ydGVyczogdHJ1ZSwKICAgICAgICAgICAgaXRlbXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgic3RvcmFnZSIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJzdG9yYWdlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJ0aGlzIGRldmljZSIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJ0aGlzIGRldmljZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiYm90aCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJib3RoIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICAgIHZpc3VhbENvbG9yczogewogICAgICAgICAgICBhY2NlcHRSZXBvcnRlcnM6IHRydWUsCiAgICAgICAgICAgIGl0ZW1zOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImJvcmRlciIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJib3JkZXIiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInRleHQiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAidGV4dCIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiYmFja2dyb3VuZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJiYWNrZ3JvdW5kIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgICAgfSwKICAgICAgICAgIHZpc3VhbE9wdGlvbnM6IHsKICAgICAgICAgICAgYWNjZXB0UmVwb3J0ZXJzOiB0cnVlLAogICAgICAgICAgICBpdGVtczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJmb250IHNpemUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiZm9udCBzaXplIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJmb250IHRoaWNrbmVzcyIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJmb250IHRoaWNrbmVzcyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgibGV0dGVyIHNwYWNpbmciKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAibGV0dGVyIHNwYWNpbmciLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImJvcmRlciByYWRpdXMiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiYm9yZGVyIHJhZGl1cyIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgib3ZlcmxheSBvcGFjaXR5IiksCiAgICAgICAgICAgICAgICB2YWx1ZTogIm92ZXJsYXkgb3BhY2l0eSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXSwKICAgICAgICAgIH0sCiAgICAgICAgICBib3JkZXJUeXBlczogewogICAgICAgICAgICBhY2NlcHRSZXBvcnRlcnM6IHRydWUsCiAgICAgICAgICAgIGl0ZW1zOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImRvdHRlZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJkb3R0ZWQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoImRhc2hlZCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJkYXNoZWQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoInNvbGlkIiksCiAgICAgICAgICAgICAgICB2YWx1ZTogInNvbGlkIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJkb3VibGUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiZG91YmxlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJncm9vdmUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiZ3Jvb3ZlIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRleHQ6IFNjcmF0Y2gudHJhbnNsYXRlKCJyaWRnZSIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJyaWRnZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgiaW5zZXQiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAiaW5zZXQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIm91dHNldCIpLAogICAgICAgICAgICAgICAgdmFsdWU6ICJvdXRzZXQiLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdGV4dDogU2NyYXRjaC50cmFuc2xhdGUoIm5vbmUiKSwKICAgICAgICAgICAgICAgIHZhbHVlOiAibm9uZSIsCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgXSwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgfTsKICAgIH0KCiAgICAvLyBIZWxwZXIgRnVuY3MKICAgIGdldEZvbnRzKCkgewogICAgICBjb25zdCBjdXN0b21Gb250cyA9IHJ1bnRpbWUuZm9udE1hbmFnZXIgPyBydW50aW1lLmZvbnRNYW5hZ2VyLmdldEZvbnRzKCkubWFwKChpKSA9PiAoeyB0ZXh0OiBpLm5hbWUsIHZhbHVlOiBpLmZhbWlseSB9KSkgOiBbXTsKICAgICAgcmV0dXJuIFsuLi5idWlsdEluRm9udHMsIC4uLmN1c3RvbUZvbnRzXTsKICAgIH0KCiAgICBnZXRFbmNvZGluZ3Mob25seVNhZmUpIHsKICAgICAgY29uc3QgdHlwZXMgPSBbCiAgICAgICAgeyB0ZXh0OiBTY3JhdGNoLnRyYW5zbGF0ZSgidGV4dCIpLCB2YWx1ZTogQVNfVEVYVCB9LAogICAgICAgIHsgdGV4dDogImRhdGE6IFVSTCIsIHZhbHVlOiBBU19EQVRBX1VSTCB9LAogICAgICAgIHsgdGV4dDogImJhc2U2NCIsIHZhbHVlOiBBU19CQVNFNjQgfSwKICAgICAgICB7IHRleHQ6ICJoZXgiLCB2YWx1ZTogQVNfSEVYIH0sCiAgICAgIF07CiAgICAgIGlmICh0aGlzLl9zaG93VW5zYWZlT3B0aW9ucykgdHlwZXMucHVzaCh7IHRleHQ6ICJhcnJheUJ1ZmZlciIsIHZhbHVlOiBBU19CVUZGRVIgfSk7CiAgICAgIHJldHVybiB0eXBlczsKICAgIH0KCiAgICB0b2dnbGVWaXMoKSB7CiAgICAgIChlbmFibGVWaXMgPSBlbmFibGVWaXMgPyBmYWxzZSA6IHRydWUpLAogICAgICAgIHZtLmV4dGVuc2lvbk1hbmFnZXIucmVmcmVzaEJsb2NrcygpOwogICAgfQoKICAgIHVwZGF0ZVN0b3JlKG5hbWUsIGRhdGEsIG1ldGFEYXRhKSB7CiAgICAgIGNvbnN0IHJhd0RhdGUgPSBuZXcgRGF0ZShtZXRhRGF0YS5sYXN0TW9kaWZpZWQpOwogICAgICBzdG9yZWRGaWxlc1tuYW1lXS5kYXRhID0gewogICAgICAgIHNpemU6IG1ldGFEYXRhLnNpemUsCiAgICAgICAgc2l6ZUZvcm1hdDogZm9ybWF0RmlsZVNpemUobWV0YURhdGEuc2l6ZSksCiAgICAgICAgZGF0ZUZvcm1hdDogcmF3RGF0ZS50b0xvY2FsZVN0cmluZygpLAogICAgICAgIGRhdGEsCiAgICAgIH07CiAgICB9CgogICAgYXN5bmMgZW5jb2RlRGF0YShtZXRhLCBmb3JtYXQpIHsKICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IG1ldGEudGV4dCgpOwogICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBtZXRhLmFycmF5QnVmZmVyKCk7CiAgICAgIGlmIChmb3JtYXQgPT09IEFTX1RFWFQpIHJldHVybiB0ZXh0OwogICAgICBlbHNlIGlmIChmb3JtYXQgPT09IEFTX0JVRkZFUikgcmV0dXJuIGJ1ZmZlcjsKICAgICAgY29uc3QgYmFzZTY0ID0gYnVmZmVyVG9CYXNlNjQoYnVmZmVyKTsKICAgICAgaWYgKGZvcm1hdCA9PT0gQVNfQkFTRTY0KSByZXR1cm4gYmFzZTY0OwogICAgICBlbHNlIGlmIChmb3JtYXQgPT09IEFTX0RBVEFfVVJMKSByZXR1cm4gYGRhdGE6JHttZXRhLnR5cGV9O2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCR7YmFzZTY0fWA7CiAgICAgIGVsc2UgaWYgKGZvcm1hdCA9PT0gQVNfSEVYKSByZXR1cm4gYmFzZTY0VG9IZXgoYmFzZTY0LCAiICIpOwogICAgICByZXR1cm4gdGV4dDsKICAgIH0KCiAgICAvLyBCbG9jayBGdW5jcyAoVXBsb2FkICYgRG93bmxvYWQpCiAgICBzaG93UGlja2VyKCkgewogICAgICByZXR1cm4gc2hvd0ZpbGVQcm9tcHQoIiIsIEFTX1RFWFQpOwogICAgfQoKICAgIHNob3dQaWNrZXJFeHRlbnNpb25zKGFyZ3MpIHsKICAgICAgcmV0dXJuIHNob3dGaWxlUHJvbXB0KGFyZ3MuZXh0ZW5zaW9uLCBBU19URVhUKTsKICAgIH0KCiAgICBzaG93UGlja2VyQXMoYXJncykgewogICAgICByZXR1cm4gc2hvd0ZpbGVQcm9tcHQoIiIsIGFyZ3MuYXMpOwogICAgfQoKICAgIHNob3dQaWNrZXJFeHRlbnNpb25zQXMoYXJncykgewogICAgICByZXR1cm4gc2hvd0ZpbGVQcm9tcHQoYXJncy5leHRlbnNpb24sIGFyZ3MuYXMpOwogICAgfQoKICAgIGFzeW5jIGRvd25sb2FkKGFyZ3MpIHsKICAgICAgdHJ5IHsKICAgICAgICBhd2FpdCBkb3dubG9hZEJsb2IoCiAgICAgICAgICBuZXcgQmxvYihbU2NyYXRjaC5DYXN0LnRvU3RyaW5nKGFyZ3MudGV4dCldKSwKICAgICAgICAgIFNjcmF0Y2guQ2FzdC50b1N0cmluZyhhcmdzLmZpbGUpCiAgICAgICAgKTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgIH0KICAgIH0KCiAgICBhc3luYyBkb3dubG9hZFVSTChhcmdzKSB7CiAgICAgIHRyeSB7CiAgICAgICAgYXdhaXQgZG93bmxvYWRVbnRydXN0ZWRVUkwoCiAgICAgICAgICBTY3JhdGNoLkNhc3QudG9TdHJpbmcoYXJncy51cmwpLAogICAgICAgICAgU2NyYXRjaC5DYXN0LnRvU3RyaW5nKGFyZ3MuZmlsZSkKICAgICAgICApOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlKTsKICAgICAgfQogICAgfQoKICAgIHNldE9wZW5Nb2RlKGFyZ3MpIHsKICAgICAgaWYgKEFMTF9NT0RFUy5pbmNsdWRlcyhhcmdzLm1vZGUpKSBvcGVuRmlsZVNlbGVjdG9yTW9kZSA9IGFyZ3MubW9kZTsKICAgICAgZWxzZSBjb25zb2xlLndhcm4oYHVua25vd24gbW9kZWAsIGFyZ3MubW9kZSk7CiAgICB9CgogICAgZmlsZUluZm8oYXJncykgewogICAgICBpZiAoYXJncy5GT1JNQVQgPT09ICJzaXplIGZvcm1hdHRlZCIpIHJldHVybiBGaWxlU2l6ZTsKICAgICAgZWxzZSBpZiAoYXJncy5GT1JNQVQgPT09ICJzaXplIHVuZm9ybWF0dGVkIikgcmV0dXJuIFJhd0ZpbGVTaXplOwogICAgICBlbHNlIGlmIChhcmdzLkZPUk1BVCA9PT0gIm1vZGlmaWVkIGRhdGUiKSByZXR1cm4gZmlsZURhdGU7CiAgICAgIGVsc2UgaWYgKGFyZ3MuRk9STUFUID09PSAiZGF0YSIpIHJldHVybiBsYXN0RGF0YTsKICAgICAgcmV0dXJuIEZpbGVOYW1lOwogICAgfQoKICAgIG1vZGFsT3BlbigpIHsKICAgICAgcmV0dXJuIG9wZW5Nb2RhbHMgIT09IDA7CiAgICB9CgogICAgLy8gRmlsZSBXcml0aW5nICYgRm9sZGVycwogICAgY2hlY2tGaWxlQVBJKCkgewogICAgICByZXR1cm4gInNob3dPcGVuRmlsZVBpY2tlciIgaW4gd2luZG93OwogICAgfQoKICAgIGFsbFN0b3JlZCgpIHsKICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KE9iamVjdC5rZXlzKHN0b3JlZEZpbGVzKSk7CiAgICB9CgogICAgYXN5bmMgc2V0U3RvcmVkRmlsZShhcmdzKSB7CiAgICAgIGlmICghdGhpcy5jaGVja0ZpbGVBUEkoKSkgcmV0dXJuOwogICAgICBsZXQgZmlsZVR5cGVzID0gYXJncy5GSUxFID8gYXJncy5GSUxFLnNwbGl0KCIgIikgOiBbXTsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCBwaWNrZXIgPSBhd2FpdCBzaG93RmlsZVByb21wdChmaWxlVHlwZXMsICIiLCAid2luZG93Iik7CiAgICAgICAgaWYgKCFwaWNrZXIpIHJldHVybjsKICAgICAgICBzdG9yZWRGaWxlc1thcmdzLk5BTUVdID0geyBmaWxlOiBwaWNrZXJbMF0sIGRhdGE6IHt9IH07CiAgICAgICAgY29uc3QgbWV0YURhdGEgPSBhd2FpdCBwaWNrZXJbMF0uZ2V0RmlsZSgpOwogICAgICAgIGNvbnN0IGVuY29kZWREYXRhID0gYXdhaXQgdGhpcy5lbmNvZGVEYXRhKG1ldGFEYXRhLCBhcmdzLlRZUEUpOwogICAgICAgIHRoaXMudXBkYXRlU3RvcmUoYXJncy5OQU1FLCBlbmNvZGVkRGF0YSwgbWV0YURhdGEpOwogICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS53YXJuKGUpOwogICAgICB9CiAgICB9CgogICAgYXN5bmMgc3RvcmVkRm9sZGVyKGFyZ3MpIHsKICAgICAgaWYgKCF0aGlzLmNoZWNrRmlsZUFQSSgpKSByZXR1cm47CiAgICAgIHRyeSB7CiAgICAgICAgY29uc3QgcGlja2VyID0gYXdhaXQgc2hvd0ZpbGVQcm9tcHQoIkZvbGRlciIsICIiLCAiZm9sZGVyIik7CiAgICAgICAgaWYgKCFwaWNrZXIpIHJldHVybjsKICAgICAgICBjb25zdCBlbnRyaWVzID0gcGlja2VyLmVudHJpZXMoKTsKICAgICAgICBjb25zdCBmb2xkZXJOID0gYXJncy5OQU1FID8gYXJncy5OQU1FIDogcGlja2VyLm5hbWU7CiAgICAgICAgbGV0IHRoaXNGaWxlID0gIiI7CiAgICAgICAgd2hpbGUgKHRoaXNGaWxlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnN0IG91dGVyRGF0YSA9IGF3YWl0IGVudHJpZXMubmV4dCgpOwogICAgICAgICAgdGhpc0ZpbGUgPSBvdXRlckRhdGEudmFsdWU7CiAgICAgICAgICBpZiAodGhpc0ZpbGUgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb25zdCBpbm5lckRhdGEgPSB0aGlzRmlsZVsxXTsKICAgICAgICAgICAgY29uc3QgbmFtZSA9IGAke2ZvbGRlck59LyR7aW5uZXJEYXRhLm5hbWV9YDsKICAgICAgICAgICAgc3RvcmVkRmlsZXNbbmFtZV0gPSB7IGZpbGU6IGlubmVyRGF0YSwgZGF0YToge30gfTsKICAgICAgICAgICAgY29uc3QgbWV0YURhdGEgPSBhd2FpdCBpbm5lckRhdGEuZ2V0RmlsZSgpOwogICAgICAgICAgICBjb25zdCBlbmNvZGVkRGF0YSA9IGF3YWl0IHRoaXMuZW5jb2RlRGF0YShtZXRhRGF0YSwgYXJncy5UWVBFKTsKICAgICAgICAgICAgdGhpcy51cGRhdGVTdG9yZShuYW1lLCBlbmNvZGVkRGF0YSwgbWV0YURhdGEpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUud2FybihlKTsKICAgICAgfQogICAgfQoKICAgIGRlbGV0ZVN0b3JlZEZpbGUoYXJncykgewogICAgICBpZiAoYXJncy5PUFRJT04gPT09ICJ0aGlzIGRldmljZSIgfHwgYXJncy5PUFRJT04gPT09ICJib3RoIikgewogICAgICAgIGlmICghdGhpcy5jaGVja0ZpbGVBUEkoKSB8fCBzdG9yZWRGaWxlc1thcmdzLk5BTUVdID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgICBzdG9yZWRGaWxlc1thcmdzLk5BTUVdLmZpbGUucmVtb3ZlKCk7CiAgICAgIH0KICAgICAgaWYgKGFyZ3MuT1BUSU9OID09PSAic3RvcmFnZSIgfHwgYXJncy5PUFRJT04gPT09ICJib3RoIikgZGVsZXRlIHN0b3JlZEZpbGVzW2FyZ3MuTkFNRV07CiAgICB9CgogICAgYXN5bmMgdXBkYXRlRmlsZShhcmdzKSB7CiAgICAgIGlmICghdGhpcy5jaGVja0ZpbGVBUEkoKSB8fCBzdG9yZWRGaWxlc1thcmdzLk5BTUVdID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB3cml0YWJsZSA9IGF3YWl0IHN0b3JlZEZpbGVzW2FyZ3MuTkFNRV0uZmlsZS5jcmVhdGVXcml0YWJsZSgpOwogICAgICAgIGF3YWl0IHdyaXRhYmxlLndyaXRlKGFyZ3MuVFhUKTsKICAgICAgICBhd2FpdCB3cml0YWJsZS5jbG9zZSgpOwogICAgICAgIHRoaXMudXBkYXRlU3RvcmUoYXJncy5OQU1FLCBhcmdzLlRYVCwgewogICAgICAgICAgbGFzdE1vZGlmaWVkOiBEYXRlLm5vdygpLAogICAgICAgICAgc2l6ZTogU2NyYXRjaC5DYXN0LnRvU3RyaW5nKGFyZ3MuVFhUKS5sZW5ndGgsCiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oZSk7CiAgICAgIH0KICAgIH0KCiAgICBhc3luYyB1cGRhdGVGaWxlVVJMKGFyZ3MpIHsKICAgICAgaWYgKCF0aGlzLmNoZWNrRmlsZUFQSSgpIHx8IHN0b3JlZEZpbGVzW2FyZ3MuTkFNRV0gPT09IHVuZGVmaW5lZCkgcmV0dXJuOwogICAgICB0cnkgewogICAgICAgIGNvbnN0IHVybCA9IFNjcmF0Y2guQ2FzdC50b1N0cmluZyhhcmdzLlVSTCk7CiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgU2NyYXRjaC5mZXRjaCh1cmwpOwogICAgICAgIGlmICghcmVzLm9rKSByZXR1cm47CiAgICAgICAgY29uc3QgYmxvYiA9IGF3YWl0IHJlcy5ibG9iKCk7CiAgCiAgICAgICAgY29uc3Qgd3JpdGFibGUgPSBhd2FpdCBzdG9yZWRGaWxlc1thcmdzLk5BTUVdLmZpbGUuY3JlYXRlV3JpdGFibGUoKTsKICAgICAgICBhd2FpdCB3cml0YWJsZS53cml0ZShibG9iKTsKICAgICAgICBhd2FpdCB3cml0YWJsZS5jbG9zZSgpOwogICAgICAgIHRoaXMudXBkYXRlU3RvcmUoYXJncy5OQU1FLCB1cmwsIHsKICAgICAgICAgIGxhc3RNb2RpZmllZDogRGF0ZS5ub3coKSwKICAgICAgICAgIHNpemU6IHVybC5sZW5ndGgsCiAgICAgICAgfSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oZSk7CiAgICAgIH0KICAgIH0KCiAgICBzdG9yZWRJbmZvKGFyZ3MpIHsKICAgICAgY29uc3QgZmlsZUluZm8gPSBzdG9yZWRGaWxlc1thcmdzLk5BTUVdOwogICAgICBpZiAoZmlsZUluZm8gPT09IHVuZGVmaW5lZCkgcmV0dXJuICIiOwogICAgICBlbHNlIGlmIChhcmdzLkZPUk1BVCA9PT0gInNpemUgZm9ybWF0dGVkIikgcmV0dXJuIGZpbGVJbmZvLmRhdGEuc2l6ZUZvcm1hdDsKICAgICAgZWxzZSBpZiAoYXJncy5GT1JNQVQgPT09ICJzaXplIHVuZm9ybWF0dGVkIikgcmV0dXJuIGZpbGVJbmZvLmRhdGEuc2l6ZTsKICAgICAgZWxzZSBpZiAoYXJncy5GT1JNQVQgPT09ICJtb2RpZmllZCBkYXRlIikgcmV0dXJuIGZpbGVJbmZvLmRhdGEuZGF0ZUZvcm1hdDsKICAgICAgZWxzZSBpZiAoYXJncy5GT1JNQVQgPT09ICJkYXRhIikgcmV0dXJuIGZpbGVJbmZvLmRhdGEuZGF0YTsKICAgICAgcmV0dXJuIGZpbGVJbmZvLmZpbGUubmFtZTsKICAgIH0KCiAgICBtb3ZlU3RvcmFnZSgpIHsKICAgICAgY29uc3QgZXh0ID0gcnVudGltZS5leHRfY3N0MTIyOXppcDsKICAgICAgaWYgKGV4dCA9PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgICAgIGV4dC5jcmVhdGVFbXB0eUFzKHsgTkFNRTogImZpbGVzRXhwYW5kZWRfc3RvcmVkRmlsZXMiIH0pOwogICAgICBpZiAoZXh0LnppcEVycm9yKSByZXR1cm47CiAgICAgIGNvbnN0IHppcCA9IGV4dC56aXBzWyJmaWxlc0V4cGFuZGVkX3N0b3JlZEZpbGVzIl07CiAgICAgIGZvciAoY29uc3QgW25hbWUsIGZpbGVdIG9mIE9iamVjdC5lbnRyaWVzKHN0b3JlZEZpbGVzKSkgewogICAgICAgIHppcC5maWxlKG5hbWUsIGZpbGUuZGF0YS5kYXRhKTsKICAgICAgfQogICAgfQoKICAgIC8vIEV4dHJhCiAgICBmaW5kRmlsZVNpemUoYXJncykgewogICAgICBjb25zdCBzaXplID0gU2NyYXRjaC5DYXN0LnRvU3RyaW5nKGFyZ3MuRklMRSkubGVuZ3RoOyAvLyBieXRlcwogICAgICByZXR1cm4gYXJncy5UWVBFID09PSAiZm9ybWF0dGVkIiA/IGZvcm1hdEZpbGVTaXplKHNpemUpIDogc2l6ZTsKICAgIH0KCiAgICAvLyBWaXN1YWxzCiAgICByZXNldFN0eWxlKCkgewogICAgICBzZWxlY3Rvck9wdGlvbnMgPSB7CiAgICAgICAgYm9yZGVyQ29sb3I6ICIjODg4IiwgdGV4dENvbG9yOiAiIzAwMCIsIG91dGVyOiAiI2ZmZiIsCiAgICAgICAgc2l6ZUZvbnQ6IDEuNSwgYm9yZGVyUmFkaXVzOiAxNiwgYm9yZGVyVHlwZTogImRhc2hlZCIsCiAgICAgICAgZm9udDogImluaGVyaXQiLCBzaGFkb3c6IDAuNSwgaW1hZ2U6ICIiLCB0ZXh0VjogIiIsCiAgICAgICAgZm9udFdlaWdodDogNDAsIGxldHRlclNwYWNpbmc6ICJub3JtYWwiLAogICAgICB9OwogICAgICB1cGRhdGVNb2RhbFZpc3VhbHMoKTsKICAgIH0KCiAgICBib3JkZXJDb2xvcnMoYXJncykgewogICAgICBzd2l0Y2ggKGFyZ3MuT1BUSU9OKSB7CiAgICAgICAgY2FzZSAidGV4dCI6CiAgICAgICAgICBzZWxlY3Rvck9wdGlvbnMudGV4dENvbG9yID0gYXJncy5DT0xPUjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImJhY2tncm91bmQiOgogICAgICAgICAgc2VsZWN0b3JPcHRpb25zLm91dGVyID0gYXJncy5DT0xPUjsKICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucy5pbWFnZSA9ICIiOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucy5ib3JkZXJDb2xvciA9IGFyZ3MuQ09MT1I7CiAgICAgIH0KICAgICAgdXBkYXRlTW9kYWxWaXN1YWxzKCk7CiAgICB9CgogICAgdmlzdWFsc1NlbGVjdChhcmdzKSB7CiAgICAgIGNvbnN0IGFtdEluID0gU2NyYXRjaC5DYXN0LnRvTnVtYmVyKGFyZ3MuQU1UKTsKICAgICAgc3dpdGNoIChhcmdzLk9QVElPTikgewogICAgICAgIGNhc2UgImZvbnQgc2l6ZSI6CiAgICAgICAgICBzZWxlY3Rvck9wdGlvbnMuc2l6ZUZvbnQgPSBhbXRJbiAvIDEwOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAiZm9udCB0aGlja25lc3MiOgogICAgICAgICAgc2VsZWN0b3JPcHRpb25zLmZvbnRXZWlnaHQgPSBhbXRJbjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgImxldHRlciBzcGFjaW5nIjoKICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucy5sZXR0ZXJTcGFjaW5nID0gYW10SW47CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJib3JkZXIgcmFkaXVzIjoKICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucy5ib3JkZXJSYWRpdXMgPSBhbXRJbjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgIm92ZXJsYXkgb3BhY2l0eSI6CiAgICAgICAgICBzZWxlY3Rvck9wdGlvbnMuc2hhZG93ID0gU2NyYXRjaC5DYXN0LnRvTnVtYmVyKGFtdEluKSAvIDEwMDsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBzZWxlY3Rvck9wdGlvbnMuYm9yZGVyID0gYW10SW47CiAgICAgIH0KICAgICAgdXBkYXRlTW9kYWxWaXN1YWxzKCk7CiAgICB9CgogICAgYm9yZGVyVHlwZVNldChhcmdzKSB7CiAgICAgIHNlbGVjdG9yT3B0aW9ucy5ib3JkZXJUeXBlID0gYXJncy5UWVBFOwogICAgICB1cGRhdGVNb2RhbFZpc3VhbHMoKTsKICAgIH0KCiAgICBmb250U2V0KGFyZ3MpIHsKICAgICAgc2VsZWN0b3JPcHRpb25zLmZvbnQgPSBhcmdzLkZPTlQ7CiAgICAgIHVwZGF0ZU1vZGFsVmlzdWFscygpOwogICAgfQoKICAgIGN1cnJlbnRYKGFyZ3MpIHsKICAgICAgaWYgKGFyZ3MuVEhJTkcgPT09ICJzaGFkb3ciIHx8IGFyZ3MuVEhJTkcgPT09ICJzaXplRm9udCIpIHsKICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gYXJncy5USElORyA9PT0gInNoYWRvdyIgPyAxMDAgOiAxMDsKICAgICAgICByZXR1cm4gc2VsZWN0b3JPcHRpb25zW2FyZ3MuVEhJTkddICogbXVsdGlwbGllcjsKICAgICAgfQogICAgICByZXR1cm4gc2VsZWN0b3JPcHRpb25zW2FyZ3MuVEhJTkddOwogICAgfQoKICAgIC8qIERlcHJlY2F0aW9uIE1hcmtlciAqLwogICAgc2NhbGVJbWFnZSgpIHsgLyogZGVwcmVjYXRlZCAqLyB9CiAgICAvKiBNYXJrZXIgRW5kICovCiAgICBpbWFnZVNldChhcmdzKSB7CiAgICAgIFNjcmF0Y2guY2FuRmV0Y2goZW5jb2RlVVJJKGFyZ3MuSU1HKSkudGhlbigoY2FuRmV0Y2gpID0+IHsKICAgICAgICBpZiAoY2FuRmV0Y2gpIHsKICAgICAgICAgIHNlbGVjdG9yT3B0aW9ucy5pbWFnZSA9IGB1cmwoJHtlbmNvZGVVUkkoYXJncy5JTUcpfSlgOwogICAgICAgICAgdXBkYXRlTW9kYWxWaXN1YWxzKCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUud2FybigiQ2Fubm90IGZldGNoIGNvbnRlbnQgZnJvbSB0aGUgVVJMLiIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgdGV4dFNldChhcmdzKSB7CiAgICAgIHNlbGVjdG9yT3B0aW9ucy50ZXh0ViA9IGFyZ3MuVEVYVDsKICAgICAgdXBkYXRlTW9kYWxWaXN1YWxzKCk7CiAgICB9CiAgfQoKICBTY3JhdGNoLmV4dGVuc2lvbnMucmVnaXN0ZXIoKHJ1bnRpbWUuZXh0X2ZpbGVzRXhwYW5kZWQgPSBuZXcgZmlsZXNFeHBhbmRlZCgpKSk7Cn0pKFNjcmF0Y2gpOwo=","https://extensions.turbowarp.org/text.js","https://extensions.turbowarp.org/Lily/Skins.js","https://extensions.turbowarp.org/obviousAlexC/SensingPlus.js","https://extensions.turbowarp.org/TheShovel/CustomStyles.js","https://extensions.turbowarp.org/stretch.js","https://extensions.turbowarp.org/CubesterYT/KeySimulation.js","https://extensions.turbowarp.org/runtime-options.js","https://extensions.turbowarp.org/utilities.js","https://extensions.turbowarp.org/fetch.js","https://extensions.turbowarp.org/NexusKitten/moremotion.js"],"bakeExtensions":true,"maxTextureDimension":2048}